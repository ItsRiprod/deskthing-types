export enum AGENT_MESSAGE_TYPES {
  TEXT = "text",
  ERROR = "error",
  /** An action that it is taking - not implemented yet */
  // ACTION = "action",
  /** A general status update like "Processing" or "Compiling" */
  STATUS = "status"
} 

/**
 * These are responses from an agent that can be displayed on the car thing
 */
export type AgentMessage = {
  /** Autogenerated and filled in */
  source: string
  /** Autogenerated and filled in */
  version: string // the version of the agent message
  /** Autogenerated and filled in */
  timestamp: number
  /** The title of the current conversation - will be overridden */
  title?: string
  /** The role of the current agent. If this is different from the previous, it will not be combined visually */
  role?: string
  /** If the name is the same, whether or not there should be a break between the current message and the last */
  break_before?: boolean
  /** The clientID of the sender */
  clientId?: string // the clientId of the sender
  /** A unique ID for the message - this is required */
  messageId: string
} & (
  {
    type: AGENT_MESSAGE_TYPES.TEXT;
    /** The text message to send */
    message: string
  }
  | {
    type: AGENT_MESSAGE_TYPES.ERROR;
    /** The error message to send */
    message: string
    code: number
    error?: string // the actual error message if applicable
  }
  | {
    type: AGENT_MESSAGE_TYPES.ERROR;
    /** The error message to send */
    message: string
    code?: number
    error?: string // the actual error message if applicable
  }
  | {
    type: AGENT_MESSAGE_TYPES.STATUS;
    /** The error message to send */
    message: string
    /** Status of progress until response if applicable - can be number or string, just for rendering */
    progress?: string
  }
)